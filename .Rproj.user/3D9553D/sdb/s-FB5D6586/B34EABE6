{
    "collab_server" : "",
    "contents" : "\n# This is the server logic for a Shiny web application.\n# You can find out more about building applications with Shiny here:\n#\n# http://shiny.rstudio.com\n#\n\nlibrary(shiny)\nlibrary(reshape2)\nlibrary(ggplot2)\n\nbetaMode <- function(alpha, beta) {\n  return((alpha - 1)/(alpha+beta-2))\n}\n\nbetaMean <- function(alpha, beta) {\n  return((alpha)/(alpha+beta))\n}\n\nbetaStd <- function(alpha, beta) {\n  return(sqrt((alpha * beta)/(((alpha + beta)**2) * (alpha + beta + 1))))\n}\n\nshinyServer(function(input, output) {\n  \n  values <- reactiveValues(x=NULL)\n  \n  observeEvent(input$add, {\n    n <- sum(input$n, length(values$x))\n    prob <- input$prob ## success probability\n    values$x <- c(values$x, rbinom(input$n, size = 1, prob))\n    \n  })\n  \n  observeEvent(input$remove, {\n    n <- input$n\n    values$x <- head(values$x, -n)\n    \n  })\n  \n  observeEvent(input$reset, {\n    values$x <- NULL\n  })\n  \n  \n  output$priorDistFormula <- renderUI({\n    alpha <- input$alpha\n    beta <- input$beta\n    uiElement <- withMathJax(helpText(sprintf('$$\\\\begin{align}\n                                      p(\\\\theta)&=\\\\frac{\\\\theta^{\\\\alpha-1}(1-\\\\theta)^{\\\\beta-1}}{B(\\\\alpha, \\\\beta)}\n                                            \\\\\\\\&=Beta(\\\\theta|\\\\alpha, \\\\beta)\n                                            \\\\\\\\&=Beta(\\\\theta|\\\\textbf{%.2f}, \\\\textbf{%.2f})\n                                      \\\\end{align}$$', alpha, beta, alpha, beta, alpha, beta)))\n    return(uiElement)\n  })\n  \n  output$likelihoodFormula <- renderUI({\n    n <- length(values$x)\n    x <- sum(values$x)\n    alpha <- input$alpha\n    beta <- input$beta\n    uiElement <- list(withMathJax(helpText(sprintf('$$X\\\\sim Bin(n, \\\\theta) = Bin(\\\\textbf{%i}, \\\\theta)$$', n))),\n                      withMathJax(helpText(sprintf('$$\\\\begin{align}\n                                      p(x|\\\\theta)&={n\\\\choose{x}}\\\\theta^{x}(1-\\\\theta)^{n-x}\n                                              \\\\\\\\&={\\\\textbf{%i}\\\\choose{\\\\textbf{%i}}}\\\\theta^{\\\\textbf{%i}}(1-\\\\theta)^{\\\\textbf{%i}}\n                                      \\\\end{align}$$', n, x, x, n-x))))\n    return(uiElement)\n  })\n  \n  output$posteriorFormula <- renderUI({\n    n <- length(values$x)\n    x <- sum(values$x)\n    alpha <- input$alpha\n    beta <- input$beta\n    uiElement <- withMathJax(helpText(sprintf('$$\\\\begin{align}\n                                               p(\\\\theta|x)&=p(x|\\\\theta)p(\\\\theta)\n                                                       \\\\\\\\&=\\\\theta^{x}(1-\\\\theta)^{n-x}\\\\theta^{\\\\alpha-1}(1-\\\\theta)^{\\\\beta-1}\n                                                       \\\\\\\\&=\\\\theta^{(\\\\alpha+x)-1}(1-\\\\theta)^{(\\\\beta+n+x)-1}\n                                                       \\\\\\\\&=Beta(\\\\theta|\\\\alpha+x, \\\\beta+n-x)\n                                                       \\\\\\\\&=Beta(\\\\theta|\\\\textbf{%.2f}, \\\\textbf{%.2f})\n                                                   \\\\end{align}$$', sum(alpha, x), sum(beta, n, x))))\n    return(uiElement)\n})\n  \n  \n  output$samplePlot <- renderPlot({\n    validate(\n      need(!(length(values$x)==0), \"\")\n    )\n    \n    successes <- sum(values$x)\n    fails <- length(values$x) - successes\n    \n    draws <- data.frame(Draw=as.factor(c(\"Successes\", \"Fails\")),\n                        Count=c(successes, fails),\n                        Sample=c(\"Sample\", \"Sample\"))\n    \n    \n    fig <- ggplot(draws, aes(x=Sample, y=Count, colour=Draw, fill=Draw)) + \n      geom_bar(stat = \"identity\", width=.2) +\n      geom_text(aes(label = Count), colour=\"black\", size = 8, hjust = .5, vjust = 4, position = \"stack\") +\n      theme_bw() +\n      theme(axis.line=element_blank(),\n            axis.text.x=element_blank(),\n            axis.text.y=element_blank(),\n            axis.ticks=element_blank(),\n            axis.title.x=element_blank(),\n            axis.title.y=element_blank(),\n            legend.position=\"left\",\n            legend.title = element_blank(),\n            legend.text  = element_text(size=15),\n            panel.background=element_blank(),\n            panel.border=element_blank(),\n            panel.grid.major=element_blank(),\n            panel.grid.minor=element_blank(),\n            plot.background=element_blank())\n    \n    return(fig)\n  })\n  \n  output$triPlot <- renderPlot({\n    validate(\n      need(!(length(values$x)==0), \"Please start drawing samples using the 'Add' button!\")\n    )\n    \n    # generate bins based on input$bins from ui.R\n    n <- length(values$x)\n    alpha <- input$alpha\n    beta <- input$beta\n    theta <- seq(0, 1, length.out = 100)\n    \n    ## Data\n    x <- sum(values$x) ## number of successes\n    \n    ## Likelihood p(x|theta) with x ~ Bin(theta, alpha, beta)\n    likelihood <- dbinom(x, n, theta)\n    \n    ## Prior p(theta) based on Beta(theta, alpha, beta)\n    prior <- dbeta(theta, alpha, beta)\n    \n    ## Posterior Distribution p(theta|x)\n    posterior <- dbeta(theta, alpha+x, beta+n-x)\n    \n    data <- data.frame(Theta=theta, Posterior=posterior, Prior=prior, Likelihood=likelihood)\n    data.molten <- melt(data, id.vars = \"Theta\")\n    colnames(data.molten) <- c(\"Theta\", \"Function\", \"Density\")\n    \n    ggplot(data.molten, aes(x=Theta, y=Density)) +\n      geom_line(aes(colour=Function, linetype=Function), size=1.5) +\n      geom_text(x = Inf, y = Inf, label = paste0(\"n=\", n), hjust = 1.2, vjust = 1.2, size=10) + \n      xlab(expression(theta)) +\n      scale_y_continuous(limits = c(0, 30)) +\n      scale_x_continuous(breaks = seq(0, 1.1, by=.1)) +\n      theme_bw() +\n      theme(plot.title   = element_text(size=15),\n            axis.text.x  = element_text(size=20),\n            axis.title.x = element_text(size=25),\n            axis.text.y  = element_text(size=20),\n            axis.title.y = element_text(size=25),\n            legend.title = element_blank(),\n            legend.text  = element_text(size=15))\n  })\n  \n  \n  output$pointEst_Prior <- renderTable({\n    validate(\n      need(!(length(values$x)==0), NULL)\n    )\n    \n    alpha <- input$alpha\n    beta  <- input$beta\n    \n    beta_mode <- betaMode(alpha, beta)\n    beta_mean <- betaMean(alpha, beta)\n    beta_std  <- betaStd(alpha, beta)\n    \n    pE <- data.frame(Type=c(\"Mode\", \"Mean\", \"Std\"), \n                     PointEstimate=c(beta_mode, beta_mean, beta_std))\n    return(pE)\n  })\n  \n  output$pointEst_Likelihood <- renderTable({\n    validate(\n      need(!(length(values$x)==0), NULL)\n    )\n    \n    x <- sum(values$x) ## number of successes\n    n <- length(values$x) ## number of tries\n    alpha <- x + 1\n    beta <- n - x + 1\n    \n    beta_mode <- betaMode(alpha, beta)\n    beta_mean <- betaMean(alpha, beta)\n    beta_std  <- betaStd(alpha, beta)\n    \n    pE <- data.frame(Type=c(\"Mode\", \"Mean\", \"Std\"), \n                                   PointEstimate=c(beta_mode, beta_mean, beta_std))\n    return(pE)\n  })\n  \n  output$pointEst_Posterior <- renderTable({\n    validate(\n      need(!(length(values$x)==0), NULL)\n    )\n    \n    x <- sum(values$x) ## number of successes\n    n <- length(values$x) ## number of tries\n    alpha <- input$alpha + x\n    beta <- input$beta + n - x\n    \n    beta_mode <- betaMode(alpha, beta)\n    beta_mean <- betaMean(alpha, beta)\n    beta_std  <- betaStd(alpha, beta)\n    \n    pE <- data.frame(Type=c(\"Mode\", \"Mean\", \"Std\"), \n                     PointEstimate=c(beta_mode, beta_mean, beta_std))\n    return(pE)\n    \n  })\n})",
    "created" : 1494526384017.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "11|35|13|0|\n15|35|17|0|\n19|34|21|0|\n27|27|32|2|\n34|30|38|2|\n40|29|42|2|\n45|39|54|2|\n56|40|67|2|\n69|39|82|0|\n85|35|118|2|\n164|40|179|2|\n181|45|198|2|\n",
    "hash" : "1252444271",
    "id" : "B34EABE6",
    "lastKnownWriteTime" : 1495146019,
    "last_content_update" : 1495146019223,
    "path" : "~/workspace/R/BayesianParameterEstimation/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}