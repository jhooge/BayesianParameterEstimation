{
    "collab_server" : "",
    "contents" : "\n# This is the server logic for a Shiny web application.\n# You can find out more about building applications with Shiny here:\n#\n# http://shiny.rstudio.com\n#\n\nlibrary(shiny)\nlibrary(reshape2)\nlibrary(ggplot2)\n\nbetaMode <- function(alpha, beta) {\n  return((alpha - 1)/(alpha+beta-2))\n}\n\nbetaMean <- function(alpha, beta) {\n  return((alpha)/(alpha+beta))\n}\n\nbetaStd <- function(alpha, beta) {\n  return(sqrt((alpha * beta)/(((alpha + beta)**2) * (alpha + beta + 1))))\n}\n\nshinyServer(function(input, output) {\n  \n  values <- reactiveValues(x=NULL)\n  \n  observeEvent(input$add, {\n    n <- sum(input$n, length(values$x))\n    prob <- input$prob ## success probability\n    values$x <- rbinom(n, size = 1, prob)\n  })\n  \n  observeEvent(input$remove, {\n    n <- input$n\n    values$x <- head(values$x, -n)\n  })\n  \n  observeEvent(input$reset, {\n    values$x <- NULL\n  })\n  \n  output$triPlot <- renderPlot({\n    \n    validate(\n      need(!(length(values$x)==0), \"Please start drawing samples using the 'Add' button!\")\n    )\n    \n    # generate bins based on input$bins from ui.R\n    n <- length(values$x)\n    alpha <- input$alpha\n    beta <- input$beta\n    theta <- seq(0,1, length.out = n)\n    \n    ## Data\n    x <- sum(values$x) ## number of successes\n    \n    ## Likelihood p(x|theta) with x ~ Bin(theta, alpha, beta)\n    likelihood <- dbinom(x, n, theta)\n    \n    ## Prior p(theta) based on Beta(theta, alpha, beta)\n    prior <- dbeta(theta, alpha, beta)\n    \n    ## Posterior Distribution p(theta|x)\n    posterior <- dbeta(theta, alpha+x, beta+n-x)\n    \n    data <- data.frame(Theta=theta, Posterior=posterior, Prior=prior, Likelihood=likelihood)\n    data.molten <- melt(data, id.vars = \"Theta\")\n    colnames(data.molten) <- c(\"Theta\", \"Function\", \"Density\")\n    \n    ggplot(data.molten, aes(x=Theta, y=Density)) +\n      geom_line(aes(colour=Function, linetype=Function), size=1.5) +\n      geom_text(x = Inf, y = Inf, label = paste0(\"n=\", n), hjust = 1.2, vjust = 1.2, size=10) + \n      xlab(\"Probability of Success\") +\n      scale_x_continuous(breaks = seq(0, 1.1, by=.1)) +\n      theme_bw() +\n      theme(plot.title   = element_text(size=15),\n            axis.text.x  = element_text(size=20),\n            axis.title.x = element_text(size=25),\n            axis.text.y  = element_text(size=20),\n            axis.title.y = element_text(size=25),\n            legend.title = element_blank(),\n            legend.text  = element_text(size=15))\n  })\n  \n  output$pointEst_Prior <- renderTable({\n    alpha <- input$alpha\n    beta  <- input$beta\n    \n    beta_mode <- betaMode(alpha, beta)\n    beta_mean <- betaMean(alpha, beta)\n    beta_std  <- betaStd(alpha, beta)\n    \n    pE <- data.frame(Type=c(\"Mode\", \"Mean\", \"Std\"), \n                     PointEstimate=c(beta_mode, beta_mean, beta_std))\n    return(pE)\n  })\n  \n  output$pointEst_Likelihood <- renderTable({\n    x <- sum(values$x) ## number of successes\n    n <- length(values$x) ## number of tries\n    alpha <- x + 1\n    beta <- n - x + 1\n    \n    beta_mode <- betaMode(alpha, beta)\n    beta_mean <- betaMean(alpha, beta)\n    beta_std  <- betaStd(alpha, beta)\n    \n    pE <- data.frame(Type=c(\"Mode\", \"Mean\", \"Std\"), \n                     PointEstimate=c(beta_mode, beta_mean, beta_std))\n    return(pE)\n  })\n  \n  output$pointEst_Posterior <- renderTable({\n    x <- sum(values$x) ## number of successes\n    n <- length(values$x) ## number of tries\n    alpha <- input$alpha + 1\n    beta <- input$beta + n - x\n    \n    beta_mode <- betaMode(alpha, beta)\n    beta_mean <- betaMean(alpha, beta)\n    beta_std  <- betaStd(alpha, beta)\n    \n    pE <- data.frame(Type=c(\"Mode\", \"Mean\", \"Std\"), \n                     PointEstimate=c(beta_mode, beta_mean, beta_std))\n    return(pE)\n    \n  })\n})\n\n",
    "created" : 1494526384017.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3730090352",
    "id" : "B34EABE6",
    "lastKnownWriteTime" : 1495045556,
    "last_content_update" : 1495045556644,
    "path" : "~/workspace/R/BayesianParameterEstimation/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}